package designpattern.decorator;

/**
 * Created by chenhao on 2016/11/27.
 */
public class Expericence {
    /**
     * 装饰者模式 动态的将责任附加到对象上  若要扩展功能 装饰者提供了比继承更有弹性的替代方案
     *
     * 装饰者模式 怎么去实现的呢？
     *
     * 1.装饰者和被装饰对象有相同的超类型
     * 2.你可以用一个或者多个装饰者包装一个对象
     * 3.既然装饰者和被装饰者有相同的超类型，所以在任何需要原始对象的场合
     * 可以用装饰过的对象替代它
     * 4.装饰对象可以在所委托被装饰者的行为之前或者之后  加上自己的行为 以达到特定的目的
     * 5.对象可以在任何时候被装饰 所以可以在运行时动态地  不限量地用你喜欢的装饰者来装饰对象
     * */
}
